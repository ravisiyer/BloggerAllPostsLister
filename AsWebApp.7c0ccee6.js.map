{"mappings":"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","sources":["app.js"],"sourcesContent":["// app.js\r\nconst BLOGGER_API_KEY_STORAGE_KEY = 'blogger_api_key';\r\nconst BLOGGER_API_KEY_REMEMBER_FLAG = 'blogger_api_key_remember';\r\nconst THEME_STORAGE_KEY = 'app_theme';\r\n\r\nconst blogUrlOrIdInput = document.getElementById('blogUrlOrIdInput');\r\nconst apiKeyInput = document.getElementById('apiKeyInput');\r\nconst toggleApiKeyVisibilityButton = document.getElementById('toggleApiKeyVisibility');\r\nconst rememberApiKeyCheckbox = document.getElementById('rememberApiKeyCheckbox');\r\nconst initializeApiClientButton = document.getElementById('initializeApiClientButton');\r\nconst getPostsButton = document.getElementById('getPostsButton');\r\nconst clearApiKeyButton = document.getElementById('clearApiKeyButton');\r\nconst messagesDiv = document.getElementById('messages');\r\nconst loadingSpinner = document.getElementById('loadingSpinner');\r\nconst postsList = document.getElementById('postsList');\r\nconst totalPostsCountDiv = document.getElementById('totalPostsCount');\r\nconst saveAsHtmlButton = document.getElementById('saveAsHtmlButton');\r\n\r\nconst themeSelector = document.getElementById('themeSelector');\r\nconst themeDeviceRadio = document.getElementById('themeDevice');\r\nconst themeLightRadio = document.getElementById('themeLight');\r\nconst themeDarkRadio = document.getElementById('themeDark');\r\n\r\nlet gapiClientReady = false;\r\nlet gapiCoreLoadedPromise = null;\r\nlet currentApiKeyInClient = '';\r\nlet blogIdFromQueryString = '';\r\nlet apiKeyRememberedOnLoad = false;\r\n\r\n// --- Theme Functions ---\r\n\r\nfunction applyTheme(themeChoice) {\r\n    document.body.classList.remove('light-mode', 'dark-mode');\r\n\r\n    let effectiveTheme = themeChoice;\r\n    let storedTheme = themeChoice;\r\n\r\n    if (themeChoice === 'device') {\r\n        localStorage.removeItem(THEME_STORAGE_KEY);\r\n        effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    } else {\r\n        localStorage.setItem(THEME_STORAGE_KEY, themeChoice);\r\n    }\r\n\r\n    if (effectiveTheme === 'dark') {\r\n        document.body.classList.add('dark-mode');\r\n    }\r\n\r\n    if (storedTheme === 'device') {\r\n        themeDeviceRadio.checked = true;\r\n    } else if (storedTheme === 'light') {\r\n        themeLightRadio.checked = true;\r\n    } else if (storedTheme === 'dark') {\r\n        themeDarkRadio.checked = true;\r\n    }\r\n}\r\n\r\nfunction getInitialThemeChoice() {\r\n    const storedTheme = localStorage.getItem(THEME_STORAGE_KEY);\r\n    if (storedTheme) {\r\n        return storedTheme;\r\n    }\r\n    return 'device';\r\n}\r\n\r\n// --- Utility Functions ---\r\n\r\nfunction displayMessage(msg, type = 'error') {\r\n    messagesDiv.textContent = msg;\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (type === 'error') {\r\n        messagesDiv.classList.add('error-message');\r\n    } else if (type === 'success') {\r\n        messagesDiv.classList.add('success-message');\r\n    } else {\r\n        messagesDiv.classList.add('info-message');\r\n    }\r\n\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    if (type === 'error') {\r\n        // Error messages persist\r\n    } else if (type === 'info' || type === 'success') {\r\n        const timeoutId = setTimeout(() => {\r\n            messagesDiv.textContent = '';\r\n            messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        }, 8000);\r\n        messagesDiv.dataset.timeoutId = timeoutId;\r\n    }\r\n}\r\n\r\nfunction updateButtonStates() {\r\n    const isApiKeyEmpty = apiKeyInput.value.trim().length === 0;\r\n    const isBlogInputEmpty = blogUrlOrIdInput.value.trim().length === 0;\r\n    const isCurrentApiKeyInClient = apiKeyInput.value.trim() === currentApiKeyInClient && gapiClientReady;\r\n    const hasPostsDisplayed = postsList.children.length > 0;\r\n\r\n    console.log(`[updateButtonStates] API Empty: ${isApiKeyEmpty}, Blog Empty: ${isBlogInputEmpty}, GAPI Ready: ${gapiClientReady}, Key Matches Client: ${isCurrentApiKeyInClient}, Has Posts: ${hasPostsDisplayed}`);\r\n\r\n    clearApiKeyButton.disabled = isApiKeyEmpty;\r\n    getPostsButton.disabled = isBlogInputEmpty || isApiKeyEmpty || !gapiClientReady || !isCurrentApiKeyInClient;\r\n    initializeApiClientButton.disabled = isApiKeyEmpty || (gapiClientReady && isCurrentApiKeyInClient);\r\n\r\n    rememberApiKeyCheckbox.disabled = isApiKeyEmpty;\r\n    if (isApiKeyEmpty) {\r\n        rememberApiKeyCheckbox.checked = false;\r\n        localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n        localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    }\r\n\r\n    saveAsHtmlButton.disabled = !hasPostsDisplayed;\r\n}\r\n\r\nfunction showLoading(show) {\r\n    loadingSpinner.style.display = show ? 'block' : 'none';\r\n    getPostsButton.disabled = show;\r\n    clearApiKeyButton.disabled = show;\r\n    initializeApiClientButton.disabled = show;\r\n    blogUrlOrIdInput.disabled = show;\r\n    apiKeyInput.disabled = show;\r\n    toggleApiKeyVisibilityButton.disabled = show;\r\n    rememberApiKeyCheckbox.disabled = show;\r\n    saveAsHtmlButton.disabled = show;\r\n\r\n    if (show) {\r\n        themeSelector.classList.add('disabled');\r\n    } else {\r\n        themeSelector.classList.remove('disabled');\r\n    }\r\n\r\n    if (show) {\r\n        messagesDiv.textContent = 'Fetching posts...';\r\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        messagesDiv.classList.add('info-message');\r\n        if (messagesDiv.dataset.timeoutId) {\r\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n            delete messagesDiv.dataset.timeoutId;\r\n        }\r\n        postsList.innerHTML = '';\r\n        totalPostsCountDiv.textContent = '';\r\n    } else {\r\n        if (messagesDiv.textContent === 'Fetching posts...') {\r\n            messagesDiv.textContent = '';\r\n            messagesDiv.classList.remove('info-message');\r\n        }\r\n        updateButtonStates();\r\n    }\r\n}\r\n\r\nfunction saveApiKey(key) {\r\n    localStorage.setItem(BLOGGER_API_KEY_STORAGE_KEY, key);\r\n    localStorage.setItem(BLOGGER_API_KEY_REMEMBER_FLAG, 'true');\r\n    updateButtonStates();\r\n}\r\n\r\nfunction getSavedApiKey() {\r\n    const rememberState = localStorage.getItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    if (rememberState === 'true') {\r\n        rememberApiKeyCheckbox.checked = true;\r\n        return localStorage.getItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n    } else {\r\n        rememberApiKeyCheckbox.checked = false;\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction clearSavedApiKey() {\r\n    localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n    localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    rememberApiKeyCheckbox.checked = false;\r\n    updateButtonStates();\r\n}\r\n\r\nfunction getBlogIdFromQuery() {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const blogParam = params.get('blog');\r\n    if (blogParam) {\r\n        blogUrlOrIdInput.value = blogParam;\r\n        return blogParam;\r\n    }\r\n    return null;\r\n}\r\n\r\nasync function autoGetPostsIfReady() {\r\n    if (apiKeyRememberedOnLoad && blogIdFromQueryString && gapiClientReady) {\r\n        console.log(\"Auto-triggering Get All Posts...\");\r\n        await getPostsButton.click();\r\n    }\r\n}\r\n\r\nwindow.onGapiLoaded = function() {\r\n    console.log('Google API client script loaded. Now loading the core client module...');\r\n    gapiCoreLoadedPromise = new Promise(resolve => {\r\n        gapi.load('client', resolve);\r\n    });\r\n\r\n    gapiCoreLoadedPromise.then(async () => {\r\n        console.log('gapi.client core module loaded.');\r\n        const savedKey = getSavedApiKey();\r\n        if (savedKey) {\r\n            apiKeyInput.value = savedKey;\r\n            apiKeyRememberedOnLoad = true;\r\n            await initGapiClient(savedKey);\r\n            if (gapiClientReady && blogIdFromQueryString) {\r\n                autoGetPostsIfReady();\r\n            }\r\n        } else {\r\n            displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\r\n            updateButtonStates();\r\n        }\r\n    }).catch(error => {\r\n        console.error('Error loading gapi.client core module:', error);\r\n        displayMessage('Critical Error: Failed to load Google API client core.', 'error');\r\n        updateButtonStates();\r\n    });\r\n};\r\n\r\nasync function initGapiClient(apiKeyToUse) {\r\n    if (!apiKeyToUse) {\r\n        console.log('initGapiClient called with empty API Key, cannot initialize.');\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        displayMessage('API Key is missing for initialization.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    if (gapiClientReady && currentApiKeyInClient === apiKeyToUse) {\r\n        console.log('gapi.client already initialized with this key.');\r\n        displayMessage('API Client already initialized with this key.', 'info');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    try {\r\n        console.log('Attempting to initialize gapi.client with provided key...');\r\n        messagesDiv.textContent = '';\r\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        if (messagesDiv.dataset.timeoutId) {\r\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n            delete messagesDiv.dataset.timeoutId;\r\n        }\r\n\r\n        displayMessage('Initializing API client...', 'info');\r\n        await gapi.client.init({\r\n            apiKey: apiKeyToUse,\r\n            discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/blogger/v3/rest\"],\r\n        });\r\n        gapiClientReady = true;\r\n        currentApiKeyInClient = apiKeyToUse;\r\n        console.log('gapi.client initialized SUCCESSFULLY.');\r\n        displayMessage('Google API Client ready. You can now Get All Posts.', 'success');\r\n        updateButtonStates();\r\n    } catch (error) {\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        console.error('Error initializing gapi.client:', error);\r\n        const errorMessage = error.details || (error.result && error.result.error && error.result.error.message) || error.message || JSON.stringify(error);\r\n        displayMessage(`Failed to initialize API client. Error: ${errorMessage}. Please check your key and restrictions.`, 'error');\r\n        updateButtonStates();\r\n    }\r\n}\r\n\r\nasync function getBlogIdFromUrl(blogUrl, apiKey) {\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\r\n    }\r\n    try {\r\n        const response = await gapi.client.blogger.blogs.getByUrl({\r\n            url: blogUrl,\r\n            key: apiKey\r\n        });\r\n        if (!response.result || !response.result.id) {\r\n             throw new Error(\"Blog ID not found for the provided URL. Please check the URL carefully.\");\r\n        }\r\n        return response.result.id;\r\n    } catch (error) {\r\n        if (error.result && error.result.error && error.result.error.code === 404) {\r\n            throw new Error(\"Blog not found for this URL. Please verify the URL and your API key restrictions.\");\r\n        }\r\n        throw new Error(`Failed to get Blog ID from URL: ${error.details || error.message || JSON.stringify(error)}`);\r\n    }\r\n}\r\n\r\nasync function listAllPosts(blogId, apiKey, posts = [], pageToken = undefined) {\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\r\n    }\r\n    try {\r\n        const response = await gapi.client.blogger.posts.list({\r\n            blogId: blogId,\r\n            maxResults: 500,\r\n            pageToken: pageToken,\r\n            fetchBodies: false,\r\n            key: apiKey\r\n        });\r\n\r\n        if (!response.result || !response.result.items) {\r\n            return posts;\r\n        }\r\n\r\n        posts = posts.concat(response.result.items || []);\r\n\r\n        if (response.result.nextPageToken) {\r\n            return listAllPosts(blogId, apiKey, posts, response.result.nextPageToken);\r\n        } else {\r\n            return posts;\r\n        }\r\n    } catch (error) {\r\n        if (error.result && error.result.error && error.result.error.code === 404) {\r\n            throw new Error(\"Blog not found for this ID. Please verify the Blog ID and API key restrictions.\");\r\n        }\r\n        if (error.result && error.result.error && error.result.error.code === 400) {\r\n            throw new Error(\"Invalid Blog ID or malformed request. Please check the ID.\");\r\n        }\r\n        throw new Error(`Failed to list posts: ${error.details || error.message || JSON.stringify(error)}`);\r\n    }\r\n}\r\n\r\n// --- Event Handlers ---\r\n\r\nthemeSelector.addEventListener('change', (event) => {\r\n    applyTheme(event.target.value);\r\n});\r\n\r\ntoggleApiKeyVisibilityButton.addEventListener('click', () => {\r\n    if (apiKeyInput.type === 'password') {\r\n        apiKeyInput.type = 'text';\r\n        toggleApiKeyVisibilityButton.textContent = 'Hide Key';\r\n    } else {\r\n        apiKeyInput.type = 'password';\r\n        toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n    }\r\n});\r\n\r\napiKeyInput.addEventListener('input', async () => {\r\n    if (gapiClientReady && apiKeyInput.value.trim() !== currentApiKeyInClient) {\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        displayMessage('API Key changed. Please click \"Initialize API Client\" to re-initialize.', 'info');\r\n    }\r\n    updateButtonStates();\r\n});\r\n\r\nblogUrlOrIdInput.addEventListener('input', updateButtonStates);\r\n\r\nrememberApiKeyCheckbox.addEventListener('change', () => {\r\n    const apiKey = apiKeyInput.value.trim();\r\n    if (rememberApiKeyCheckbox.checked) {\r\n        if (apiKey.length > 0) {\r\n            saveApiKey(apiKey);\r\n            displayMessage('API Key saved to local storage.', 'success');\r\n        } else {\r\n            rememberApiKeyCheckbox.checked = false;\r\n            displayMessage('Please enter an API Key before checking \"Remember API Key\".', 'error');\r\n        }\r\n    } else {\r\n        clearSavedApiKey();\r\n        displayMessage('API Key removed from local storage.', 'info');\r\n    }\r\n});\r\n\r\ninitializeApiClientButton.addEventListener('click', async () => {\r\n    const apiKey = apiKeyInput.value.trim();\r\n    if (apiKey.length === 0) {\r\n        displayMessage('Please enter an API Key before initializing.', 'error');\r\n        return;\r\n    }\r\n    if (!gapiCoreLoadedPromise) {\r\n        displayMessage('Google API client script not yet loaded. Please wait.', 'error');\r\n        return;\r\n    }\r\n\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    displayMessage('Initializing API client...', 'info');\r\n    await gapiCoreLoadedPromise;\r\n    await initGapiClient(apiKey);\r\n});\r\n\r\ngetPostsButton.addEventListener('click', async () => {\r\n    console.log('[Get All Posts] button clicked. Current gapiClientReady:', gapiClientReady);\r\n\r\n    let blogUrlOrId = blogUrlOrIdInput.value.trim();\r\n    const apiKey = apiKeyInput.value.trim();\r\n\r\n    postsList.innerHTML = '';\r\n    totalPostsCountDiv.textContent = '';\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        displayMessage('Please initialize the Google API Client with your API Key first.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    if (!blogUrlOrId || !apiKey) {\r\n        displayMessage('Please ensure both Blog URL/ID and Google API Key are entered.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    showLoading(true);\r\n\r\n    try {\r\n        if (blogUrlOrId.length > 0 && !(blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) && !/^\\d+$/.test(blogUrlOrId)) {\r\n            blogUrlOrId = 'https://' + blogUrlOrId;\r\n            blogUrlOrIdInput.value = blogUrlOrId;\r\n            displayMessage('Automatically prefixed URL with https://', 'info');\r\n        }\r\n\r\n        let blogId = blogUrlOrId;\r\n        if (blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) {\r\n            displayMessage('Attempting to get Blog ID from URL...', 'info');\r\n            blogId = await getBlogIdFromUrl(blogUrlOrId, apiKey);\r\n            displayMessage(`Found Blog ID: ${blogId}`, 'success');\r\n        }\r\n\r\n        const allPosts = await listAllPosts(blogId, apiKey);\r\n\r\n        if (allPosts.length === 0) {\r\n            postsList.innerHTML = '<li>No posts found for this blog, or the provided Blog ID/URL is invalid or has no posts.</li>';\r\n            displayMessage('No posts found for the provided Blog ID/URL.', 'info');\r\n            totalPostsCountDiv.textContent = 'Total Posts: 0';\r\n        } else {\r\n            allPosts.sort((a, b) => new Date(b.published) - new Date(a.published));\r\n\r\n            totalPostsCountDiv.textContent = `Total Posts: ${allPosts.length}`;\r\n\r\n            let currentMonthYear = '';\r\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n            allPosts.forEach(post => {\r\n                const postDate = new Date(post.published);\r\n                const month = monthNames[postDate.getMonth()];\r\n                const year = postDate.getFullYear();\r\n                const day = postDate.getDate();\r\n                const monthYear = `${month} ${year}`;\r\n\r\n                if (monthYear !== currentMonthYear) {\r\n                    currentMonthYear = monthYear;\r\n                    const headerItem = document.createElement('li');\r\n                    headerItem.className = 'post-month-header';\r\n                    headerItem.textContent = currentMonthYear;\r\n                    postsList.appendChild(headerItem);\r\n                }\r\n\r\n                // NEW: Ensure post URL uses HTTPS\r\n                let postUrl = post.url;\r\n                if (postUrl.startsWith('http://')) {\r\n                    postUrl = postUrl.replace('http://', 'https://');\r\n                }\r\n\r\n                const listItem = document.createElement('li');\r\n                listItem.className = 'post-item';\r\n                listItem.innerHTML = `<strong>${day}:</strong> <a href=\"${postUrl}\" target=\"_blank\">${post.title}</a>`;\r\n                postsList.appendChild(listItem);\r\n            });\r\n            displayMessage(`Successfully loaded ${allPosts.length} posts.`, 'success');\r\n        }\r\n    } catch (error) {\r\n        displayMessage(`Error: ${error.message}`, 'error');\r\n        console.error('API Error:', error);\r\n        totalPostsCountDiv.textContent = 'Total Posts: 0';\r\n    } finally {\r\n        showLoading(false);\r\n    }\r\n});\r\n\r\nclearApiKeyButton.addEventListener('click', () => {\r\n    if (apiKeyInput.value.trim().length > 0) {\r\n        if (!confirm('Are you sure you want to clear your Google API Key from local storage? This cannot be undone.')) {\r\n            return;\r\n        }\r\n    }\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    clearSavedApiKey();\r\n    apiKeyInput.value = '';\r\n    apiKeyInput.type = 'password';\r\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n    gapiClientReady = false;\r\n    currentApiKeyInClient = '';\r\n    postsList.innerHTML = '';\r\n    totalPostsCountDiv.textContent = '';\r\n    displayMessage('API Key cleared from local storage and input field. Please re-enter to use.', 'info');\r\n    updateButtonStates();\r\n});\r\n\r\n// Save as HTML button functionality\r\nsaveAsHtmlButton.addEventListener('click', () => {\r\n    if (postsList.children.length === 0) {\r\n        displayMessage('No posts to save. Please fetch posts first.', 'info');\r\n        return;\r\n    }\r\n\r\n    const now = new Date();\r\n    const dateTimeString = now.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: true\r\n    });\r\n\r\n    const formattedDateYYYYMMDD = now.getFullYear() + '-' +\r\n                                (now.getMonth() + 1).toString().padStart(2, '0') + '-' +\r\n                                now.getDate().toString().padStart(2, '0');\r\n\r\n    let blogIdentifierForFile = blogUrlOrIdInput.value.trim()\r\n        .replace(/^(https?:\\/\\/)/, '')\r\n        .replace(/\\//g, '-')\r\n        .replace(/\\.+/g, '-')\r\n        .replace(/[^a-zA-Z0-9-]/g, '')\r\n        .replace(/^-+|-+$/g, '')\r\n        .substring(0, 50);\r\n\r\n    if (blogIdentifierForFile === '') {\r\n        blogIdentifierForFile = 'unknown-blog';\r\n    }\r\n\r\n    const savedHtmlThemeStyles = `\r\n        <style>\r\n            /* Base styles for the saved HTML */\r\n            body { font-family: sans-serif; margin: 20px; line-height: 1.5; }\r\n            ul { list-style: none; padding: 0; margin: 0; }\r\n            .post-month-header {\r\n                font-size: 1.1em;\r\n                font-weight: bold;\r\n                margin-top: 15px;\r\n                margin-bottom: 5px;\r\n                padding: 5px 10px;\r\n                border-radius: 3px;\r\n            }\r\n            .post-item {\r\n                margin-bottom: 2px;\r\n                font-size: 0.95em;\r\n                line-height: 1.3;\r\n            }\r\n            .post-item a {\r\n                text-decoration: none;\r\n            }\r\n            .post-item a:hover {\r\n                text-decoration: underline;\r\n            }\r\n            .post-item strong {\r\n                font-weight: bold;\r\n                margin-right: 3px;\r\n            }\r\n\r\n            /* Light theme defaults (will be applied by default) */\r\n            body {\r\n                background-color: #ffffff;\r\n                color: #333333;\r\n            }\r\n            .post-month-header {\r\n                background-color: #e0f7fa;\r\n                color: #333333;\r\n            }\r\n            .post-item a {\r\n                color: #0056b3;\r\n            }\r\n            .generated-header {\r\n                border: 1px solid #eee;\r\n                background-color: #f9f9f9;\r\n                color: #333;\r\n            }\r\n            .generated-header a {\r\n                color: #0056b3;\r\n            }\r\n            .total-posts-count {\r\n                color: #007bff;\r\n            }\r\n\r\n\r\n            /* Dark mode overrides using prefers-color-scheme */\r\n            @media (prefers-color-scheme: dark) {\r\n                body {\r\n                    background-color: #1a1a1a;\r\n                    color: #e0e0e0;\r\n                }\r\n                .post-month-header {\r\n                    background-color: #003e4c;\r\n                    color: #e0e0e0;\r\n                }\r\n                .post-item a {\r\n                    color: #92e0ff;\r\n                }\r\n                .generated-header {\r\n                    border: 1px solid #444444;\r\n                    background-color: #2a2a2a;\r\n                    color: #e0e0e0;\r\n                }\r\n                .generated-header a {\r\n                    color: #92e0ff;\r\n                }\r\n                .total-posts-count {\r\n                    color: #92e0ff;\r\n                }\r\n            }\r\n        </style>\r\n    `;\r\n\r\n    const headerHtml = `\r\n        <div class=\"generated-header\" style=\"margin-bottom: 20px; padding: 10px; border-radius: 5px;\">\r\n            <p style=\"margin: 0; font-size: 0.9em;\">This list of blog posts was generated on **${dateTimeString}** using the Blogger All Posts Lister.</p>\r\n            <p style=\"margin: 5px 0 0 0; font-size: 0.9em;\">Source Blog: <a href=\"${blogUrlOrIdInput.value.trim()}\" target=\"_blank\" rel=\"noopener noreferrer\">${blogUrlOrIdInput.value.trim()}</a></p>\r\n        </div>\r\n    `;\r\n\r\n    const listHtml = `\r\n        <h2 style=\"font-family: sans-serif;\">Posts</h2>\r\n        <div class=\"total-posts-count\" style=\"font-size: 1.1em; font-weight: bold; margin-bottom: 10px;\">${totalPostsCountDiv.textContent}</div>\r\n        <ul style=\"list-style: none; padding: 0; margin: 0;\">\r\n            ${postsList.innerHTML}\r\n        </ul>\r\n    `;\r\n\r\n    const fullHtmlContent = `\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Blogger Posts - ${blogUrlOrIdInput.value.trim()} - ${formattedDateYYYYMMDD}</title>\r\n            ${savedHtmlThemeStyles}\r\n        </head>\r\n        <body>\r\n            ${headerHtml}\r\n            ${listHtml}\r\n        </body>\r\n        </html>\r\n    `;\r\n\r\n    const blob = new Blob([fullHtmlContent], { type: 'text/html;charset=utf-8' });\r\n    const fileName = `${blogIdentifierForFile}-Posts-List-${formattedDateYYYYMMDD}.html`;\r\n\r\n    const a = document.createElement('a');\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(a.href);\r\n\r\n    displayMessage(`List saved as \"${fileName}\"`, 'success');\r\n});\r\n\r\n\r\n// --- Initial DOM Load Logic ---\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    applyTheme(getInitialThemeChoice());\r\n\r\n    blogIdFromQueryString = getBlogIdFromQuery();\r\n\r\n    const savedKey = getSavedApiKey();\r\n    if (savedKey) {\r\n        apiKeyInput.value = savedKey;\r\n    } else {\r\n        displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\r\n    }\r\n    apiKeyInput.type = 'password';\r\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n\r\n    updateButtonStates();\r\n});\r\n\r\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\r\n    if (!localStorage.getItem(THEME_STORAGE_KEY)) {\r\n        applyTheme('device');\r\n    }\r\n});"],"names":[],"version":3,"file":"AsWebApp.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}