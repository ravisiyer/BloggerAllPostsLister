{"mappings":"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","sources":["<anon>","app.js"],"sourcesContent":["// app.js\nconst BLOGGER_API_KEY_STORAGE_KEY = 'blogger_api_key';\nconst BLOGGER_API_KEY_REMEMBER_FLAG = 'blogger_api_key_remember';\nconst THEME_STORAGE_KEY = 'app_theme';\nconst blogUrlOrIdInput = document.getElementById('blogUrlOrIdInput');\nconst apiKeyInput = document.getElementById('apiKeyInput');\nconst toggleApiKeyVisibilityButton = document.getElementById('toggleApiKeyVisibility');\nconst rememberApiKeyCheckbox = document.getElementById('rememberApiKeyCheckbox');\nconst initializeApiClientButton = document.getElementById('initializeApiClientButton');\nconst getPostsButton = document.getElementById('getPostsButton');\nconst clearApiKeyButton = document.getElementById('clearApiKeyButton');\nconst messagesDiv = document.getElementById('messages');\nconst loadingSpinner = document.getElementById('loadingSpinner');\nconst postsList = document.getElementById('postsList');\nconst totalPostsCountDiv = document.getElementById('totalPostsCount');\nconst saveAsHtmlButton = document.getElementById('saveAsHtmlButton');\nconst themeSelector = document.getElementById('themeSelector');\nconst themeDeviceRadio = document.getElementById('themeDevice');\nconst themeLightRadio = document.getElementById('themeLight');\nconst themeDarkRadio = document.getElementById('themeDark');\nlet gapiClientReady = false;\nlet gapiCoreLoadedPromise = null;\nlet currentApiKeyInClient = '';\nlet blogIdFromQueryString = '';\nlet apiKeyRememberedOnLoad = false;\n// --- Theme Functions ---\nfunction applyTheme(themeChoice) {\n    document.body.classList.remove('light-mode', 'dark-mode');\n    let effectiveTheme = themeChoice;\n    let storedTheme = themeChoice;\n    if (themeChoice === 'device') {\n        localStorage.removeItem(THEME_STORAGE_KEY);\n        effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    } else localStorage.setItem(THEME_STORAGE_KEY, themeChoice);\n    if (effectiveTheme === 'dark') document.body.classList.add('dark-mode');\n    if (storedTheme === 'device') themeDeviceRadio.checked = true;\n    else if (storedTheme === 'light') themeLightRadio.checked = true;\n    else if (storedTheme === 'dark') themeDarkRadio.checked = true;\n}\nfunction getInitialThemeChoice() {\n    const storedTheme = localStorage.getItem(THEME_STORAGE_KEY);\n    if (storedTheme) return storedTheme;\n    return 'device';\n}\n// --- Utility Functions ---\nfunction displayMessage(msg, type = 'error') {\n    messagesDiv.textContent = msg;\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n    if (type === 'error') messagesDiv.classList.add('error-message');\n    else if (type === 'success') messagesDiv.classList.add('success-message');\n    else messagesDiv.classList.add('info-message');\n    if (messagesDiv.dataset.timeoutId) {\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n        delete messagesDiv.dataset.timeoutId;\n    }\n    if (type === 'error') ;\n    else if (type === 'info' || type === 'success') {\n        const timeoutId = setTimeout(()=>{\n            messagesDiv.textContent = '';\n            messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n        }, 8000);\n        messagesDiv.dataset.timeoutId = timeoutId;\n    }\n}\nfunction updateButtonStates() {\n    const isApiKeyEmpty = apiKeyInput.value.trim().length === 0;\n    const isBlogInputEmpty = blogUrlOrIdInput.value.trim().length === 0;\n    const isCurrentApiKeyInClient = apiKeyInput.value.trim() === currentApiKeyInClient && gapiClientReady;\n    const hasPostsDisplayed = postsList.children.length > 0;\n    console.log(`[updateButtonStates] API Empty: ${isApiKeyEmpty}, Blog Empty: ${isBlogInputEmpty}, GAPI Ready: ${gapiClientReady}, Key Matches Client: ${isCurrentApiKeyInClient}, Has Posts: ${hasPostsDisplayed}`);\n    clearApiKeyButton.disabled = isApiKeyEmpty;\n    getPostsButton.disabled = isBlogInputEmpty || isApiKeyEmpty || !gapiClientReady || !isCurrentApiKeyInClient;\n    initializeApiClientButton.disabled = isApiKeyEmpty || gapiClientReady && isCurrentApiKeyInClient;\n    rememberApiKeyCheckbox.disabled = isApiKeyEmpty;\n    if (isApiKeyEmpty) {\n        rememberApiKeyCheckbox.checked = false;\n        localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\n        localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\n    }\n    saveAsHtmlButton.disabled = !hasPostsDisplayed;\n}\nfunction showLoading(show) {\n    loadingSpinner.style.display = show ? 'block' : 'none';\n    getPostsButton.disabled = show;\n    clearApiKeyButton.disabled = show;\n    initializeApiClientButton.disabled = show;\n    blogUrlOrIdInput.disabled = show;\n    apiKeyInput.disabled = show;\n    toggleApiKeyVisibilityButton.disabled = show;\n    rememberApiKeyCheckbox.disabled = show;\n    saveAsHtmlButton.disabled = show;\n    if (show) themeSelector.classList.add('disabled');\n    else themeSelector.classList.remove('disabled');\n    if (show) {\n        messagesDiv.textContent = 'Fetching posts...';\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n        messagesDiv.classList.add('info-message');\n        if (messagesDiv.dataset.timeoutId) {\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n            delete messagesDiv.dataset.timeoutId;\n        }\n        postsList.innerHTML = '';\n        totalPostsCountDiv.textContent = '';\n    } else {\n        if (messagesDiv.textContent === 'Fetching posts...') {\n            messagesDiv.textContent = '';\n            messagesDiv.classList.remove('info-message');\n        }\n        updateButtonStates();\n    }\n}\nfunction saveApiKey(key) {\n    localStorage.setItem(BLOGGER_API_KEY_STORAGE_KEY, key);\n    localStorage.setItem(BLOGGER_API_KEY_REMEMBER_FLAG, 'true');\n    updateButtonStates();\n}\nfunction getSavedApiKey() {\n    const rememberState = localStorage.getItem(BLOGGER_API_KEY_REMEMBER_FLAG);\n    if (rememberState === 'true') {\n        rememberApiKeyCheckbox.checked = true;\n        return localStorage.getItem(BLOGGER_API_KEY_STORAGE_KEY);\n    } else {\n        rememberApiKeyCheckbox.checked = false;\n        return null;\n    }\n}\nfunction clearSavedApiKey() {\n    localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\n    localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\n    rememberApiKeyCheckbox.checked = false;\n    updateButtonStates();\n}\nfunction getBlogIdFromQuery() {\n    const params = new URLSearchParams(window.location.search);\n    const blogParam = params.get('blog');\n    if (blogParam) {\n        blogUrlOrIdInput.value = blogParam;\n        return blogParam;\n    }\n    return null;\n}\nasync function autoGetPostsIfReady() {\n    if (apiKeyRememberedOnLoad && blogIdFromQueryString && gapiClientReady) {\n        console.log(\"Auto-triggering Get All Posts...\");\n        await getPostsButton.click();\n    }\n}\nwindow.onGapiLoaded = function() {\n    console.log('Google API client script loaded. Now loading the core client module...');\n    gapiCoreLoadedPromise = new Promise((resolve)=>{\n        gapi.load('client', resolve);\n    });\n    gapiCoreLoadedPromise.then(async ()=>{\n        console.log('gapi.client core module loaded.');\n        const savedKey = getSavedApiKey();\n        if (savedKey) {\n            apiKeyInput.value = savedKey;\n            apiKeyRememberedOnLoad = true;\n            await initGapiClient(savedKey);\n            if (gapiClientReady && blogIdFromQueryString) autoGetPostsIfReady();\n        } else {\n            displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\n            updateButtonStates();\n        }\n    }).catch((error)=>{\n        console.error('Error loading gapi.client core module:', error);\n        displayMessage('Critical Error: Failed to load Google API client core.', 'error');\n        updateButtonStates();\n    });\n};\nasync function initGapiClient(apiKeyToUse) {\n    if (!apiKeyToUse) {\n        console.log('initGapiClient called with empty API Key, cannot initialize.');\n        gapiClientReady = false;\n        currentApiKeyInClient = '';\n        displayMessage('API Key is missing for initialization.', 'error');\n        updateButtonStates();\n        return;\n    }\n    if (gapiClientReady && currentApiKeyInClient === apiKeyToUse) {\n        console.log('gapi.client already initialized with this key.');\n        displayMessage('API Client already initialized with this key.', 'info');\n        updateButtonStates();\n        return;\n    }\n    try {\n        console.log('Attempting to initialize gapi.client with provided key...');\n        messagesDiv.textContent = '';\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n        if (messagesDiv.dataset.timeoutId) {\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n            delete messagesDiv.dataset.timeoutId;\n        }\n        displayMessage('Initializing API client...', 'info');\n        await gapi.client.init({\n            apiKey: apiKeyToUse,\n            discoveryDocs: [\n                \"https://www.googleapis.com/discovery/v1/apis/blogger/v3/rest\"\n            ]\n        });\n        gapiClientReady = true;\n        currentApiKeyInClient = apiKeyToUse;\n        console.log('gapi.client initialized SUCCESSFULLY.');\n        displayMessage('Google API Client ready. You can now Get All Posts.', 'success');\n        updateButtonStates();\n    } catch (error) {\n        gapiClientReady = false;\n        currentApiKeyInClient = '';\n        console.error('Error initializing gapi.client:', error);\n        const errorMessage = error.details || error.result && error.result.error && error.result.error.message || error.message || JSON.stringify(error);\n        displayMessage(`Failed to initialize API client. Error: ${errorMessage}. Please check your key and restrictions.`, 'error');\n        updateButtonStates();\n    }\n}\nasync function getBlogIdFromUrl(blogUrl, apiKey) {\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\n    try {\n        const response = await gapi.client.blogger.blogs.getByUrl({\n            url: blogUrl,\n            key: apiKey\n        });\n        if (!response.result || !response.result.id) throw new Error(\"Blog ID not found for the provided URL. Please check the URL carefully.\");\n        return response.result.id;\n    } catch (error) {\n        if (error.result && error.result.error && error.result.error.code === 404) throw new Error(\"Blog not found for this URL. Please verify the URL and your API key restrictions.\");\n        throw new Error(`Failed to get Blog ID from URL: ${error.details || error.message || JSON.stringify(error)}`);\n    }\n}\nasync function listAllPosts(blogId, apiKey, posts = [], pageToken) {\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\n    try {\n        const response = await gapi.client.blogger.posts.list({\n            blogId: blogId,\n            maxResults: 500,\n            pageToken: pageToken,\n            fetchBodies: false,\n            key: apiKey\n        });\n        if (!response.result || !response.result.items) return posts;\n        posts = posts.concat(response.result.items || []);\n        if (response.result.nextPageToken) return listAllPosts(blogId, apiKey, posts, response.result.nextPageToken);\n        else return posts;\n    } catch (error) {\n        if (error.result && error.result.error && error.result.error.code === 404) throw new Error(\"Blog not found for this ID. Please verify the Blog ID and API key restrictions.\");\n        if (error.result && error.result.error && error.result.error.code === 400) throw new Error(\"Invalid Blog ID or malformed request. Please check the ID.\");\n        throw new Error(`Failed to list posts: ${error.details || error.message || JSON.stringify(error)}`);\n    }\n}\n// --- Event Handlers ---\nthemeSelector.addEventListener('change', (event)=>{\n    applyTheme(event.target.value);\n});\ntoggleApiKeyVisibilityButton.addEventListener('click', ()=>{\n    if (apiKeyInput.type === 'password') {\n        apiKeyInput.type = 'text';\n        toggleApiKeyVisibilityButton.textContent = 'Hide Key';\n    } else {\n        apiKeyInput.type = 'password';\n        toggleApiKeyVisibilityButton.textContent = 'Show Key';\n    }\n});\napiKeyInput.addEventListener('input', async ()=>{\n    if (gapiClientReady && apiKeyInput.value.trim() !== currentApiKeyInClient) {\n        gapiClientReady = false;\n        currentApiKeyInClient = '';\n        displayMessage('API Key changed. Please click \"Initialize API Client\" to re-initialize.', 'info');\n    }\n    updateButtonStates();\n});\nblogUrlOrIdInput.addEventListener('input', updateButtonStates);\nrememberApiKeyCheckbox.addEventListener('change', ()=>{\n    const apiKey = apiKeyInput.value.trim();\n    if (rememberApiKeyCheckbox.checked) {\n        if (apiKey.length > 0) {\n            saveApiKey(apiKey);\n            displayMessage('API Key saved to local storage.', 'success');\n        } else {\n            rememberApiKeyCheckbox.checked = false;\n            displayMessage('Please enter an API Key before checking \"Remember API Key\".', 'error');\n        }\n    } else {\n        clearSavedApiKey();\n        displayMessage('API Key removed from local storage.', 'info');\n    }\n});\ninitializeApiClientButton.addEventListener('click', async ()=>{\n    const apiKey = apiKeyInput.value.trim();\n    if (apiKey.length === 0) {\n        displayMessage('Please enter an API Key before initializing.', 'error');\n        return;\n    }\n    if (!gapiCoreLoadedPromise) {\n        displayMessage('Google API client script not yet loaded. Please wait.', 'error');\n        return;\n    }\n    messagesDiv.textContent = '';\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n    if (messagesDiv.dataset.timeoutId) {\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n        delete messagesDiv.dataset.timeoutId;\n    }\n    displayMessage('Initializing API client...', 'info');\n    await gapiCoreLoadedPromise;\n    await initGapiClient(apiKey);\n});\ngetPostsButton.addEventListener('click', async ()=>{\n    console.log('[Get All Posts] button clicked. Current gapiClientReady:', gapiClientReady);\n    let blogUrlOrId = blogUrlOrIdInput.value.trim();\n    const apiKey = apiKeyInput.value.trim();\n    postsList.innerHTML = '';\n    totalPostsCountDiv.textContent = '';\n    messagesDiv.textContent = '';\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n    if (messagesDiv.dataset.timeoutId) {\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n        delete messagesDiv.dataset.timeoutId;\n    }\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\n        displayMessage('Please initialize the Google API Client with your API Key first.', 'error');\n        updateButtonStates();\n        return;\n    }\n    if (!blogUrlOrId || !apiKey) {\n        displayMessage('Please ensure both Blog URL/ID and Google API Key are entered.', 'error');\n        updateButtonStates();\n        return;\n    }\n    showLoading(true);\n    try {\n        if (blogUrlOrId.length > 0 && !(blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) && !/^\\d+$/.test(blogUrlOrId)) {\n            blogUrlOrId = 'https://' + blogUrlOrId;\n            blogUrlOrIdInput.value = blogUrlOrId;\n            displayMessage('Automatically prefixed URL with https://', 'info');\n        }\n        let blogId = blogUrlOrId;\n        if (blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) {\n            displayMessage('Attempting to get Blog ID from URL...', 'info');\n            blogId = await getBlogIdFromUrl(blogUrlOrId, apiKey);\n            displayMessage(`Found Blog ID: ${blogId}`, 'success');\n        }\n        const allPosts = await listAllPosts(blogId, apiKey);\n        if (allPosts.length === 0) {\n            postsList.innerHTML = '<li>No posts found for this blog, or the provided Blog ID/URL is invalid or has no posts.</li>';\n            displayMessage('No posts found for the provided Blog ID/URL.', 'info');\n            totalPostsCountDiv.textContent = 'Total Posts: 0';\n        } else {\n            allPosts.sort((a, b)=>new Date(b.published) - new Date(a.published));\n            totalPostsCountDiv.textContent = `Total Posts: ${allPosts.length}`;\n            let currentMonthYear = '';\n            const monthNames = [\n                \"January\",\n                \"February\",\n                \"March\",\n                \"April\",\n                \"May\",\n                \"June\",\n                \"July\",\n                \"August\",\n                \"September\",\n                \"October\",\n                \"November\",\n                \"December\"\n            ];\n            allPosts.forEach((post)=>{\n                const postDate = new Date(post.published);\n                const month = monthNames[postDate.getMonth()];\n                const year = postDate.getFullYear();\n                const day = postDate.getDate();\n                const monthYear = `${month} ${year}`;\n                if (monthYear !== currentMonthYear) {\n                    currentMonthYear = monthYear;\n                    const headerItem = document.createElement('li');\n                    headerItem.className = 'post-month-header';\n                    headerItem.textContent = currentMonthYear;\n                    postsList.appendChild(headerItem);\n                }\n                // NEW: Ensure post URL uses HTTPS\n                let postUrl = post.url;\n                if (postUrl.startsWith('http://')) postUrl = postUrl.replace('http://', 'https://');\n                const listItem = document.createElement('li');\n                listItem.className = 'post-item';\n                listItem.innerHTML = `<strong>${day}:</strong> <a href=\"${postUrl}\" target=\"_blank\">${post.title}</a>`;\n                postsList.appendChild(listItem);\n            });\n            displayMessage(`Successfully loaded ${allPosts.length} posts.`, 'success');\n        }\n    } catch (error) {\n        displayMessage(`Error: ${error.message}`, 'error');\n        console.error('API Error:', error);\n        totalPostsCountDiv.textContent = 'Total Posts: 0';\n    } finally{\n        showLoading(false);\n    }\n});\nclearApiKeyButton.addEventListener('click', ()=>{\n    if (apiKeyInput.value.trim().length > 0) {\n        if (!confirm('Are you sure you want to clear your Google API Key from local storage? This cannot be undone.')) return;\n    }\n    messagesDiv.textContent = '';\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\n    if (messagesDiv.dataset.timeoutId) {\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\n        delete messagesDiv.dataset.timeoutId;\n    }\n    clearSavedApiKey();\n    apiKeyInput.value = '';\n    apiKeyInput.type = 'password';\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\n    gapiClientReady = false;\n    currentApiKeyInClient = '';\n    postsList.innerHTML = '';\n    totalPostsCountDiv.textContent = '';\n    displayMessage('API Key cleared from local storage and input field. Please re-enter to use.', 'info');\n    updateButtonStates();\n});\n// Save as HTML button functionality\nsaveAsHtmlButton.addEventListener('click', ()=>{\n    if (postsList.children.length === 0) {\n        displayMessage('No posts to save. Please fetch posts first.', 'info');\n        return;\n    }\n    const now = new Date();\n    const dateTimeString = now.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: true\n    });\n    const formattedDateYYYYMMDD = now.getFullYear() + '-' + (now.getMonth() + 1).toString().padStart(2, '0') + '-' + now.getDate().toString().padStart(2, '0');\n    let blogIdentifierForFile = blogUrlOrIdInput.value.trim().replace(/^(https?:\\/\\/)/, '').replace(/\\//g, '-').replace(/\\.+/g, '-').replace(/[^a-zA-Z0-9-]/g, '').replace(/^-+|-+$/g, '').substring(0, 50);\n    if (blogIdentifierForFile === '') blogIdentifierForFile = 'unknown-blog';\n    const savedHtmlThemeStyles = `\n        <style>\n            /* Base styles for the saved HTML */\n            body { font-family: sans-serif; margin: 20px; line-height: 1.5; }\n            ul { list-style: none; padding: 0; margin: 0; }\n            .post-month-header {\n                font-size: 1.1em;\n                font-weight: bold;\n                margin-top: 15px;\n                margin-bottom: 5px;\n                padding: 5px 10px;\n                border-radius: 3px;\n            }\n            .post-item {\n                margin-bottom: 2px;\n                font-size: 0.95em;\n                line-height: 1.3;\n            }\n            .post-item a {\n                text-decoration: none;\n            }\n            .post-item a:hover {\n                text-decoration: underline;\n            }\n            .post-item strong {\n                font-weight: bold;\n                margin-right: 3px;\n            }\n\n            /* Light theme defaults (will be applied by default) */\n            body {\n                background-color: #ffffff;\n                color: #333333;\n            }\n            .post-month-header {\n                background-color: #e0f7fa;\n                color: #333333;\n            }\n            .post-item a {\n                color: #0056b3;\n            }\n            .generated-header {\n                border: 1px solid #eee;\n                background-color: #f9f9f9;\n                color: #333;\n            }\n            .generated-header a {\n                color: #0056b3;\n            }\n            .total-posts-count {\n                color: #007bff;\n            }\n\n\n            /* Dark mode overrides using prefers-color-scheme */\n            @media (prefers-color-scheme: dark) {\n                body {\n                    background-color: #1a1a1a;\n                    color: #e0e0e0;\n                }\n                .post-month-header {\n                    background-color: #003e4c;\n                    color: #e0e0e0;\n                }\n                .post-item a {\n                    color: #92e0ff;\n                }\n                .generated-header {\n                    border: 1px solid #444444;\n                    background-color: #2a2a2a;\n                    color: #e0e0e0;\n                }\n                .generated-header a {\n                    color: #92e0ff;\n                }\n                .total-posts-count {\n                    color: #92e0ff;\n                }\n            }\n        </style>\n    `;\n    const headerHtml = `\n        <div class=\"generated-header\" style=\"margin-bottom: 20px; padding: 10px; border-radius: 5px;\">\n            <p style=\"margin: 0; font-size: 0.9em;\">This list of blog posts was generated on **${dateTimeString}** using the Blogger All Posts Lister.</p>\n            <p style=\"margin: 5px 0 0 0; font-size: 0.9em;\">Source Blog: <a href=\"${blogUrlOrIdInput.value.trim()}\" target=\"_blank\" rel=\"noopener noreferrer\">${blogUrlOrIdInput.value.trim()}</a></p>\n        </div>\n    `;\n    const listHtml = `\n        <h2 style=\"font-family: sans-serif;\">Posts</h2>\n        <div class=\"total-posts-count\" style=\"font-size: 1.1em; font-weight: bold; margin-bottom: 10px;\">${totalPostsCountDiv.textContent}</div>\n        <ul style=\"list-style: none; padding: 0; margin: 0;\">\n            ${postsList.innerHTML}\n        </ul>\n    `;\n    const fullHtmlContent = `\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Blogger Posts - ${blogUrlOrIdInput.value.trim()} - ${formattedDateYYYYMMDD}</title>\n            ${savedHtmlThemeStyles}\n        </head>\n        <body>\n            ${headerHtml}\n            ${listHtml}\n        </body>\n        </html>\n    `;\n    const blob = new Blob([\n        fullHtmlContent\n    ], {\n        type: 'text/html;charset=utf-8'\n    });\n    const fileName = `${blogIdentifierForFile}-Posts-List-${formattedDateYYYYMMDD}.html`;\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(blob);\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(a.href);\n    displayMessage(`List saved as \"${fileName}\"`, 'success');\n});\n// --- Initial DOM Load Logic ---\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    applyTheme(getInitialThemeChoice());\n    blogIdFromQueryString = getBlogIdFromQuery();\n    const savedKey = getSavedApiKey();\n    if (savedKey) apiKeyInput.value = savedKey;\n    else displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\n    apiKeyInput.type = 'password';\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\n    updateButtonStates();\n});\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event)=>{\n    if (!localStorage.getItem(THEME_STORAGE_KEY)) applyTheme('device');\n});\n\n//# sourceMappingURL=AsWebApp.7d5671c0.js.map\n","// app.js\r\nconst BLOGGER_API_KEY_STORAGE_KEY = 'blogger_api_key';\r\nconst BLOGGER_API_KEY_REMEMBER_FLAG = 'blogger_api_key_remember';\r\nconst THEME_STORAGE_KEY = 'app_theme';\r\n\r\nconst blogUrlOrIdInput = document.getElementById('blogUrlOrIdInput');\r\nconst apiKeyInput = document.getElementById('apiKeyInput');\r\nconst toggleApiKeyVisibilityButton = document.getElementById('toggleApiKeyVisibility');\r\nconst rememberApiKeyCheckbox = document.getElementById('rememberApiKeyCheckbox');\r\nconst initializeApiClientButton = document.getElementById('initializeApiClientButton');\r\nconst getPostsButton = document.getElementById('getPostsButton');\r\nconst clearApiKeyButton = document.getElementById('clearApiKeyButton');\r\nconst messagesDiv = document.getElementById('messages');\r\nconst loadingSpinner = document.getElementById('loadingSpinner');\r\nconst postsList = document.getElementById('postsList');\r\nconst totalPostsCountDiv = document.getElementById('totalPostsCount');\r\nconst saveAsHtmlButton = document.getElementById('saveAsHtmlButton');\r\n\r\nconst themeSelector = document.getElementById('themeSelector');\r\nconst themeDeviceRadio = document.getElementById('themeDevice');\r\nconst themeLightRadio = document.getElementById('themeLight');\r\nconst themeDarkRadio = document.getElementById('themeDark');\r\n\r\nlet gapiClientReady = false;\r\nlet gapiCoreLoadedPromise = null;\r\nlet currentApiKeyInClient = '';\r\nlet blogIdFromQueryString = '';\r\nlet apiKeyRememberedOnLoad = false;\r\n\r\n// --- Theme Functions ---\r\n\r\nfunction applyTheme(themeChoice) {\r\n    document.body.classList.remove('light-mode', 'dark-mode');\r\n\r\n    let effectiveTheme = themeChoice;\r\n    let storedTheme = themeChoice;\r\n\r\n    if (themeChoice === 'device') {\r\n        localStorage.removeItem(THEME_STORAGE_KEY);\r\n        effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    } else {\r\n        localStorage.setItem(THEME_STORAGE_KEY, themeChoice);\r\n    }\r\n\r\n    if (effectiveTheme === 'dark') {\r\n        document.body.classList.add('dark-mode');\r\n    }\r\n\r\n    if (storedTheme === 'device') {\r\n        themeDeviceRadio.checked = true;\r\n    } else if (storedTheme === 'light') {\r\n        themeLightRadio.checked = true;\r\n    } else if (storedTheme === 'dark') {\r\n        themeDarkRadio.checked = true;\r\n    }\r\n}\r\n\r\nfunction getInitialThemeChoice() {\r\n    const storedTheme = localStorage.getItem(THEME_STORAGE_KEY);\r\n    if (storedTheme) {\r\n        return storedTheme;\r\n    }\r\n    return 'device';\r\n}\r\n\r\n// --- Utility Functions ---\r\n\r\nfunction displayMessage(msg, type = 'error') {\r\n    messagesDiv.textContent = msg;\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (type === 'error') {\r\n        messagesDiv.classList.add('error-message');\r\n    } else if (type === 'success') {\r\n        messagesDiv.classList.add('success-message');\r\n    } else {\r\n        messagesDiv.classList.add('info-message');\r\n    }\r\n\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    if (type === 'error') {\r\n        // Error messages persist\r\n    } else if (type === 'info' || type === 'success') {\r\n        const timeoutId = setTimeout(() => {\r\n            messagesDiv.textContent = '';\r\n            messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        }, 8000);\r\n        messagesDiv.dataset.timeoutId = timeoutId;\r\n    }\r\n}\r\n\r\nfunction updateButtonStates() {\r\n    const isApiKeyEmpty = apiKeyInput.value.trim().length === 0;\r\n    const isBlogInputEmpty = blogUrlOrIdInput.value.trim().length === 0;\r\n    const isCurrentApiKeyInClient = apiKeyInput.value.trim() === currentApiKeyInClient && gapiClientReady;\r\n    const hasPostsDisplayed = postsList.children.length > 0;\r\n\r\n    console.log(`[updateButtonStates] API Empty: ${isApiKeyEmpty}, Blog Empty: ${isBlogInputEmpty}, GAPI Ready: ${gapiClientReady}, Key Matches Client: ${isCurrentApiKeyInClient}, Has Posts: ${hasPostsDisplayed}`);\r\n\r\n    clearApiKeyButton.disabled = isApiKeyEmpty;\r\n    getPostsButton.disabled = isBlogInputEmpty || isApiKeyEmpty || !gapiClientReady || !isCurrentApiKeyInClient;\r\n    initializeApiClientButton.disabled = isApiKeyEmpty || (gapiClientReady && isCurrentApiKeyInClient);\r\n\r\n    rememberApiKeyCheckbox.disabled = isApiKeyEmpty;\r\n    if (isApiKeyEmpty) {\r\n        rememberApiKeyCheckbox.checked = false;\r\n        localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n        localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    }\r\n\r\n    saveAsHtmlButton.disabled = !hasPostsDisplayed;\r\n}\r\n\r\nfunction showLoading(show) {\r\n    loadingSpinner.style.display = show ? 'block' : 'none';\r\n    getPostsButton.disabled = show;\r\n    clearApiKeyButton.disabled = show;\r\n    initializeApiClientButton.disabled = show;\r\n    blogUrlOrIdInput.disabled = show;\r\n    apiKeyInput.disabled = show;\r\n    toggleApiKeyVisibilityButton.disabled = show;\r\n    rememberApiKeyCheckbox.disabled = show;\r\n    saveAsHtmlButton.disabled = show;\r\n\r\n    if (show) {\r\n        themeSelector.classList.add('disabled');\r\n    } else {\r\n        themeSelector.classList.remove('disabled');\r\n    }\r\n\r\n    if (show) {\r\n        messagesDiv.textContent = 'Fetching posts...';\r\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        messagesDiv.classList.add('info-message');\r\n        if (messagesDiv.dataset.timeoutId) {\r\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n            delete messagesDiv.dataset.timeoutId;\r\n        }\r\n        postsList.innerHTML = '';\r\n        totalPostsCountDiv.textContent = '';\r\n    } else {\r\n        if (messagesDiv.textContent === 'Fetching posts...') {\r\n            messagesDiv.textContent = '';\r\n            messagesDiv.classList.remove('info-message');\r\n        }\r\n        updateButtonStates();\r\n    }\r\n}\r\n\r\nfunction saveApiKey(key) {\r\n    localStorage.setItem(BLOGGER_API_KEY_STORAGE_KEY, key);\r\n    localStorage.setItem(BLOGGER_API_KEY_REMEMBER_FLAG, 'true');\r\n    updateButtonStates();\r\n}\r\n\r\nfunction getSavedApiKey() {\r\n    const rememberState = localStorage.getItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    if (rememberState === 'true') {\r\n        rememberApiKeyCheckbox.checked = true;\r\n        return localStorage.getItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n    } else {\r\n        rememberApiKeyCheckbox.checked = false;\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction clearSavedApiKey() {\r\n    localStorage.removeItem(BLOGGER_API_KEY_STORAGE_KEY);\r\n    localStorage.removeItem(BLOGGER_API_KEY_REMEMBER_FLAG);\r\n    rememberApiKeyCheckbox.checked = false;\r\n    updateButtonStates();\r\n}\r\n\r\nfunction getBlogIdFromQuery() {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const blogParam = params.get('blog');\r\n    if (blogParam) {\r\n        blogUrlOrIdInput.value = blogParam;\r\n        return blogParam;\r\n    }\r\n    return null;\r\n}\r\n\r\nasync function autoGetPostsIfReady() {\r\n    if (apiKeyRememberedOnLoad && blogIdFromQueryString && gapiClientReady) {\r\n        console.log(\"Auto-triggering Get All Posts...\");\r\n        await getPostsButton.click();\r\n    }\r\n}\r\n\r\nwindow.onGapiLoaded = function() {\r\n    console.log('Google API client script loaded. Now loading the core client module...');\r\n    gapiCoreLoadedPromise = new Promise(resolve => {\r\n        gapi.load('client', resolve);\r\n    });\r\n\r\n    gapiCoreLoadedPromise.then(async () => {\r\n        console.log('gapi.client core module loaded.');\r\n        const savedKey = getSavedApiKey();\r\n        if (savedKey) {\r\n            apiKeyInput.value = savedKey;\r\n            apiKeyRememberedOnLoad = true;\r\n            await initGapiClient(savedKey);\r\n            if (gapiClientReady && blogIdFromQueryString) {\r\n                autoGetPostsIfReady();\r\n            }\r\n        } else {\r\n            displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\r\n            updateButtonStates();\r\n        }\r\n    }).catch(error => {\r\n        console.error('Error loading gapi.client core module:', error);\r\n        displayMessage('Critical Error: Failed to load Google API client core.', 'error');\r\n        updateButtonStates();\r\n    });\r\n};\r\n\r\nasync function initGapiClient(apiKeyToUse) {\r\n    if (!apiKeyToUse) {\r\n        console.log('initGapiClient called with empty API Key, cannot initialize.');\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        displayMessage('API Key is missing for initialization.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    if (gapiClientReady && currentApiKeyInClient === apiKeyToUse) {\r\n        console.log('gapi.client already initialized with this key.');\r\n        displayMessage('API Client already initialized with this key.', 'info');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    try {\r\n        console.log('Attempting to initialize gapi.client with provided key...');\r\n        messagesDiv.textContent = '';\r\n        messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n        if (messagesDiv.dataset.timeoutId) {\r\n            clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n            delete messagesDiv.dataset.timeoutId;\r\n        }\r\n\r\n        displayMessage('Initializing API client...', 'info');\r\n        await gapi.client.init({\r\n            apiKey: apiKeyToUse,\r\n            discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/blogger/v3/rest\"],\r\n        });\r\n        gapiClientReady = true;\r\n        currentApiKeyInClient = apiKeyToUse;\r\n        console.log('gapi.client initialized SUCCESSFULLY.');\r\n        displayMessage('Google API Client ready. You can now Get All Posts.', 'success');\r\n        updateButtonStates();\r\n    } catch (error) {\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        console.error('Error initializing gapi.client:', error);\r\n        const errorMessage = error.details || (error.result && error.result.error && error.result.error.message) || error.message || JSON.stringify(error);\r\n        displayMessage(`Failed to initialize API client. Error: ${errorMessage}. Please check your key and restrictions.`, 'error');\r\n        updateButtonStates();\r\n    }\r\n}\r\n\r\nasync function getBlogIdFromUrl(blogUrl, apiKey) {\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\r\n    }\r\n    try {\r\n        const response = await gapi.client.blogger.blogs.getByUrl({\r\n            url: blogUrl,\r\n            key: apiKey\r\n        });\r\n        if (!response.result || !response.result.id) {\r\n             throw new Error(\"Blog ID not found for the provided URL. Please check the URL carefully.\");\r\n        }\r\n        return response.result.id;\r\n    } catch (error) {\r\n        if (error.result && error.result.error && error.result.error.code === 404) {\r\n            throw new Error(\"Blog not found for this URL. Please verify the URL and your API key restrictions.\");\r\n        }\r\n        throw new Error(`Failed to get Blog ID from URL: ${error.details || error.message || JSON.stringify(error)}`);\r\n    }\r\n}\r\n\r\nasync function listAllPosts(blogId, apiKey, posts = [], pageToken = undefined) {\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        throw new Error(\"Google API Client is not initialized or API Key has changed. Please initialize client first.\");\r\n    }\r\n    try {\r\n        const response = await gapi.client.blogger.posts.list({\r\n            blogId: blogId,\r\n            maxResults: 500,\r\n            pageToken: pageToken,\r\n            fetchBodies: false,\r\n            key: apiKey\r\n        });\r\n\r\n        if (!response.result || !response.result.items) {\r\n            return posts;\r\n        }\r\n\r\n        posts = posts.concat(response.result.items || []);\r\n\r\n        if (response.result.nextPageToken) {\r\n            return listAllPosts(blogId, apiKey, posts, response.result.nextPageToken);\r\n        } else {\r\n            return posts;\r\n        }\r\n    } catch (error) {\r\n        if (error.result && error.result.error && error.result.error.code === 404) {\r\n            throw new Error(\"Blog not found for this ID. Please verify the Blog ID and API key restrictions.\");\r\n        }\r\n        if (error.result && error.result.error && error.result.error.code === 400) {\r\n            throw new Error(\"Invalid Blog ID or malformed request. Please check the ID.\");\r\n        }\r\n        throw new Error(`Failed to list posts: ${error.details || error.message || JSON.stringify(error)}`);\r\n    }\r\n}\r\n\r\n// --- Event Handlers ---\r\n\r\nthemeSelector.addEventListener('change', (event) => {\r\n    applyTheme(event.target.value);\r\n});\r\n\r\ntoggleApiKeyVisibilityButton.addEventListener('click', () => {\r\n    if (apiKeyInput.type === 'password') {\r\n        apiKeyInput.type = 'text';\r\n        toggleApiKeyVisibilityButton.textContent = 'Hide Key';\r\n    } else {\r\n        apiKeyInput.type = 'password';\r\n        toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n    }\r\n});\r\n\r\napiKeyInput.addEventListener('input', async () => {\r\n    if (gapiClientReady && apiKeyInput.value.trim() !== currentApiKeyInClient) {\r\n        gapiClientReady = false;\r\n        currentApiKeyInClient = '';\r\n        displayMessage('API Key changed. Please click \"Initialize API Client\" to re-initialize.', 'info');\r\n    }\r\n    updateButtonStates();\r\n});\r\n\r\nblogUrlOrIdInput.addEventListener('input', updateButtonStates);\r\n\r\nrememberApiKeyCheckbox.addEventListener('change', () => {\r\n    const apiKey = apiKeyInput.value.trim();\r\n    if (rememberApiKeyCheckbox.checked) {\r\n        if (apiKey.length > 0) {\r\n            saveApiKey(apiKey);\r\n            displayMessage('API Key saved to local storage.', 'success');\r\n        } else {\r\n            rememberApiKeyCheckbox.checked = false;\r\n            displayMessage('Please enter an API Key before checking \"Remember API Key\".', 'error');\r\n        }\r\n    } else {\r\n        clearSavedApiKey();\r\n        displayMessage('API Key removed from local storage.', 'info');\r\n    }\r\n});\r\n\r\ninitializeApiClientButton.addEventListener('click', async () => {\r\n    const apiKey = apiKeyInput.value.trim();\r\n    if (apiKey.length === 0) {\r\n        displayMessage('Please enter an API Key before initializing.', 'error');\r\n        return;\r\n    }\r\n    if (!gapiCoreLoadedPromise) {\r\n        displayMessage('Google API client script not yet loaded. Please wait.', 'error');\r\n        return;\r\n    }\r\n\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    displayMessage('Initializing API client...', 'info');\r\n    await gapiCoreLoadedPromise;\r\n    await initGapiClient(apiKey);\r\n});\r\n\r\ngetPostsButton.addEventListener('click', async () => {\r\n    console.log('[Get All Posts] button clicked. Current gapiClientReady:', gapiClientReady);\r\n\r\n    let blogUrlOrId = blogUrlOrIdInput.value.trim();\r\n    const apiKey = apiKeyInput.value.trim();\r\n\r\n    postsList.innerHTML = '';\r\n    totalPostsCountDiv.textContent = '';\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    if (!gapiClientReady || apiKey !== currentApiKeyInClient) {\r\n        displayMessage('Please initialize the Google API Client with your API Key first.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    if (!blogUrlOrId || !apiKey) {\r\n        displayMessage('Please ensure both Blog URL/ID and Google API Key are entered.', 'error');\r\n        updateButtonStates();\r\n        return;\r\n    }\r\n\r\n    showLoading(true);\r\n\r\n    try {\r\n        if (blogUrlOrId.length > 0 && !(blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) && !/^\\d+$/.test(blogUrlOrId)) {\r\n            blogUrlOrId = 'https://' + blogUrlOrId;\r\n            blogUrlOrIdInput.value = blogUrlOrId;\r\n            displayMessage('Automatically prefixed URL with https://', 'info');\r\n        }\r\n\r\n        let blogId = blogUrlOrId;\r\n        if (blogUrlOrId.startsWith('http://') || blogUrlOrId.startsWith('https://')) {\r\n            displayMessage('Attempting to get Blog ID from URL...', 'info');\r\n            blogId = await getBlogIdFromUrl(blogUrlOrId, apiKey);\r\n            displayMessage(`Found Blog ID: ${blogId}`, 'success');\r\n        }\r\n\r\n        const allPosts = await listAllPosts(blogId, apiKey);\r\n\r\n        if (allPosts.length === 0) {\r\n            postsList.innerHTML = '<li>No posts found for this blog, or the provided Blog ID/URL is invalid or has no posts.</li>';\r\n            displayMessage('No posts found for the provided Blog ID/URL.', 'info');\r\n            totalPostsCountDiv.textContent = 'Total Posts: 0';\r\n        } else {\r\n            allPosts.sort((a, b) => new Date(b.published) - new Date(a.published));\r\n\r\n            totalPostsCountDiv.textContent = `Total Posts: ${allPosts.length}`;\r\n\r\n            let currentMonthYear = '';\r\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n            allPosts.forEach(post => {\r\n                const postDate = new Date(post.published);\r\n                const month = monthNames[postDate.getMonth()];\r\n                const year = postDate.getFullYear();\r\n                const day = postDate.getDate();\r\n                const monthYear = `${month} ${year}`;\r\n\r\n                if (monthYear !== currentMonthYear) {\r\n                    currentMonthYear = monthYear;\r\n                    const headerItem = document.createElement('li');\r\n                    headerItem.className = 'post-month-header';\r\n                    headerItem.textContent = currentMonthYear;\r\n                    postsList.appendChild(headerItem);\r\n                }\r\n\r\n                // NEW: Ensure post URL uses HTTPS\r\n                let postUrl = post.url;\r\n                if (postUrl.startsWith('http://')) {\r\n                    postUrl = postUrl.replace('http://', 'https://');\r\n                }\r\n\r\n                const listItem = document.createElement('li');\r\n                listItem.className = 'post-item';\r\n                listItem.innerHTML = `<strong>${day}:</strong> <a href=\"${postUrl}\" target=\"_blank\">${post.title}</a>`;\r\n                postsList.appendChild(listItem);\r\n            });\r\n            displayMessage(`Successfully loaded ${allPosts.length} posts.`, 'success');\r\n        }\r\n    } catch (error) {\r\n        displayMessage(`Error: ${error.message}`, 'error');\r\n        console.error('API Error:', error);\r\n        totalPostsCountDiv.textContent = 'Total Posts: 0';\r\n    } finally {\r\n        showLoading(false);\r\n    }\r\n});\r\n\r\nclearApiKeyButton.addEventListener('click', () => {\r\n    if (apiKeyInput.value.trim().length > 0) {\r\n        if (!confirm('Are you sure you want to clear your Google API Key from local storage? This cannot be undone.')) {\r\n            return;\r\n        }\r\n    }\r\n    messagesDiv.textContent = '';\r\n    messagesDiv.classList.remove('error-message', 'info-message', 'success-message');\r\n    if (messagesDiv.dataset.timeoutId) {\r\n        clearTimeout(parseInt(messagesDiv.dataset.timeoutId));\r\n        delete messagesDiv.dataset.timeoutId;\r\n    }\r\n\r\n    clearSavedApiKey();\r\n    apiKeyInput.value = '';\r\n    apiKeyInput.type = 'password';\r\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n    gapiClientReady = false;\r\n    currentApiKeyInClient = '';\r\n    postsList.innerHTML = '';\r\n    totalPostsCountDiv.textContent = '';\r\n    displayMessage('API Key cleared from local storage and input field. Please re-enter to use.', 'info');\r\n    updateButtonStates();\r\n});\r\n\r\n// Save as HTML button functionality\r\nsaveAsHtmlButton.addEventListener('click', () => {\r\n    if (postsList.children.length === 0) {\r\n        displayMessage('No posts to save. Please fetch posts first.', 'info');\r\n        return;\r\n    }\r\n\r\n    const now = new Date();\r\n    const dateTimeString = now.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: true\r\n    });\r\n\r\n    const formattedDateYYYYMMDD = now.getFullYear() + '-' +\r\n                                (now.getMonth() + 1).toString().padStart(2, '0') + '-' +\r\n                                now.getDate().toString().padStart(2, '0');\r\n\r\n    let blogIdentifierForFile = blogUrlOrIdInput.value.trim()\r\n        .replace(/^(https?:\\/\\/)/, '')\r\n        .replace(/\\//g, '-')\r\n        .replace(/\\.+/g, '-')\r\n        .replace(/[^a-zA-Z0-9-]/g, '')\r\n        .replace(/^-+|-+$/g, '')\r\n        .substring(0, 50);\r\n\r\n    if (blogIdentifierForFile === '') {\r\n        blogIdentifierForFile = 'unknown-blog';\r\n    }\r\n\r\n    const savedHtmlThemeStyles = `\r\n        <style>\r\n            /* Base styles for the saved HTML */\r\n            body { font-family: sans-serif; margin: 20px; line-height: 1.5; }\r\n            ul { list-style: none; padding: 0; margin: 0; }\r\n            .post-month-header {\r\n                font-size: 1.1em;\r\n                font-weight: bold;\r\n                margin-top: 15px;\r\n                margin-bottom: 5px;\r\n                padding: 5px 10px;\r\n                border-radius: 3px;\r\n            }\r\n            .post-item {\r\n                margin-bottom: 2px;\r\n                font-size: 0.95em;\r\n                line-height: 1.3;\r\n            }\r\n            .post-item a {\r\n                text-decoration: none;\r\n            }\r\n            .post-item a:hover {\r\n                text-decoration: underline;\r\n            }\r\n            .post-item strong {\r\n                font-weight: bold;\r\n                margin-right: 3px;\r\n            }\r\n\r\n            /* Light theme defaults (will be applied by default) */\r\n            body {\r\n                background-color: #ffffff;\r\n                color: #333333;\r\n            }\r\n            .post-month-header {\r\n                background-color: #e0f7fa;\r\n                color: #333333;\r\n            }\r\n            .post-item a {\r\n                color: #0056b3;\r\n            }\r\n            .generated-header {\r\n                border: 1px solid #eee;\r\n                background-color: #f9f9f9;\r\n                color: #333;\r\n            }\r\n            .generated-header a {\r\n                color: #0056b3;\r\n            }\r\n            .total-posts-count {\r\n                color: #007bff;\r\n            }\r\n\r\n\r\n            /* Dark mode overrides using prefers-color-scheme */\r\n            @media (prefers-color-scheme: dark) {\r\n                body {\r\n                    background-color: #1a1a1a;\r\n                    color: #e0e0e0;\r\n                }\r\n                .post-month-header {\r\n                    background-color: #003e4c;\r\n                    color: #e0e0e0;\r\n                }\r\n                .post-item a {\r\n                    color: #92e0ff;\r\n                }\r\n                .generated-header {\r\n                    border: 1px solid #444444;\r\n                    background-color: #2a2a2a;\r\n                    color: #e0e0e0;\r\n                }\r\n                .generated-header a {\r\n                    color: #92e0ff;\r\n                }\r\n                .total-posts-count {\r\n                    color: #92e0ff;\r\n                }\r\n            }\r\n        </style>\r\n    `;\r\n\r\n    const headerHtml = `\r\n        <div class=\"generated-header\" style=\"margin-bottom: 20px; padding: 10px; border-radius: 5px;\">\r\n            <p style=\"margin: 0; font-size: 0.9em;\">This list of blog posts was generated on **${dateTimeString}** using the Blogger All Posts Lister.</p>\r\n            <p style=\"margin: 5px 0 0 0; font-size: 0.9em;\">Source Blog: <a href=\"${blogUrlOrIdInput.value.trim()}\" target=\"_blank\" rel=\"noopener noreferrer\">${blogUrlOrIdInput.value.trim()}</a></p>\r\n        </div>\r\n    `;\r\n\r\n    const listHtml = `\r\n        <h2 style=\"font-family: sans-serif;\">Posts</h2>\r\n        <div class=\"total-posts-count\" style=\"font-size: 1.1em; font-weight: bold; margin-bottom: 10px;\">${totalPostsCountDiv.textContent}</div>\r\n        <ul style=\"list-style: none; padding: 0; margin: 0;\">\r\n            ${postsList.innerHTML}\r\n        </ul>\r\n    `;\r\n\r\n    const fullHtmlContent = `\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n            <meta charset=\"UTF-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Blogger Posts - ${blogUrlOrIdInput.value.trim()} - ${formattedDateYYYYMMDD}</title>\r\n            ${savedHtmlThemeStyles}\r\n        </head>\r\n        <body>\r\n            ${headerHtml}\r\n            ${listHtml}\r\n        </body>\r\n        </html>\r\n    `;\r\n\r\n    const blob = new Blob([fullHtmlContent], { type: 'text/html;charset=utf-8' });\r\n    const fileName = `${blogIdentifierForFile}-Posts-List-${formattedDateYYYYMMDD}.html`;\r\n\r\n    const a = document.createElement('a');\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(a.href);\r\n\r\n    displayMessage(`List saved as \"${fileName}\"`, 'success');\r\n});\r\n\r\n\r\n// --- Initial DOM Load Logic ---\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    applyTheme(getInitialThemeChoice());\r\n\r\n    blogIdFromQueryString = getBlogIdFromQuery();\r\n\r\n    const savedKey = getSavedApiKey();\r\n    if (savedKey) {\r\n        apiKeyInput.value = savedKey;\r\n    } else {\r\n        displayMessage('Please enter your Google API Key and Blog URL or ID to begin.', 'info');\r\n    }\r\n    apiKeyInput.type = 'password';\r\n    toggleApiKeyVisibilityButton.textContent = 'Show Key';\r\n\r\n    updateButtonStates();\r\n});\r\n\r\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\r\n    if (!localStorage.getItem(THEME_STORAGE_KEY)) {\r\n        applyTheme('device');\r\n    }\r\n});"],"names":["BLOGGER_API_KEY_STORAGE_KEY","BLOGGER_API_KEY_REMEMBER_FLAG","THEME_STORAGE_KEY","blogUrlOrIdInput","document","getElementById","apiKeyInput","toggleApiKeyVisibilityButton","rememberApiKeyCheckbox","initializeApiClientButton","getPostsButton","clearApiKeyButton","messagesDiv","loadingSpinner","postsList","totalPostsCountDiv","saveAsHtmlButton","themeSelector","themeDeviceRadio","themeLightRadio","themeDarkRadio","gapiClientReady","gapiCoreLoadedPromise","currentApiKeyInClient","blogIdFromQueryString","apiKeyRememberedOnLoad","applyTheme","themeChoice","body","classList","remove","effectiveTheme","localStorage","removeItem","window","matchMedia","matches","setItem","add","storedTheme","checked","getInitialThemeChoice","getItem","displayMessage","msg","type","textContent","dataset","timeoutId","clearTimeout","parseInt","setTimeout","updateButtonStates","isApiKeyEmpty","value","trim","length","isBlogInputEmpty","isCurrentApiKeyInClient","hasPostsDisplayed","children","console","log","disabled","showLoading","show","style","display","innerHTML","saveApiKey","key","getSavedApiKey","rememberState","clearSavedApiKey","getBlogIdFromQuery","blogParam","params","URLSearchParams","location","search","get","autoGetPostsIfReady","click","initGapiClient","apiKeyToUse","gapi","client","init","apiKey","discoveryDocs","error","errorMessage","details","result","message","JSON","stringify","getBlogIdFromUrl","blogUrl","Error","response","blogger","blogs","getByUrl","url","id","code","listAllPosts","blogId","posts","pageToken","list","maxResults","fetchBodies","items","concat","nextPageToken","onGapiLoaded","Promise","resolve","load","then","savedKey","catch","addEventListener","event","target","blogUrlOrId","startsWith","test","allPosts","sort","a","b","Date","published","currentMonthYear","monthNames","forEach","post","postDate","month","getMonth","year","getFullYear","day","getDate","monthYear","headerItem","createElement","className","appendChild","postUrl","replace","listItem","title","confirm","now","dateTimeString","toLocaleString","hour","minute","second","hour12","formattedDateYYYYMMDD","toString","padStart","blogIdentifierForFile","substring","savedHtmlThemeStyles","headerHtml","listHtml","blob","Blob","fileName","href","URL","createObjectURL","download","removeChild","revokeObjectURL"],"version":3,"file":"AsWebApp.7d5671c0.js.map"}